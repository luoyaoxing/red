// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: userAo.proto

package red_proto_user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserAoService service

type UserAoService interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error)
}

type userAoService struct {
	c    client.Client
	name string
}

func NewUserAoService(name string, c client.Client) UserAoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "red.proto.user"
	}
	return &userAoService{
		c:    c,
		name: name,
	}
}

func (c *userAoService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserAoService.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAoService) GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserAoService.GetUser", in)
	out := new(GetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAoService service

type UserAoServiceHandler interface {
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	GetUser(context.Context, *GetUserRequest, *GetUserResponse) error
}

func RegisterUserAoServiceHandler(s server.Server, hdlr UserAoServiceHandler, opts ...server.HandlerOption) error {
	type userAoService interface {
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error
	}
	type UserAoService struct {
		userAoService
	}
	h := &userAoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserAoService{h}, opts...))
}

type userAoServiceHandler struct {
	UserAoServiceHandler
}

func (h *userAoServiceHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.UserAoServiceHandler.CreateUser(ctx, in, out)
}

func (h *userAoServiceHandler) GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error {
	return h.UserAoServiceHandler.GetUser(ctx, in, out)
}
