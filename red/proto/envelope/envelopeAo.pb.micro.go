// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: envelopeAo.proto

package red_proto_envelope

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RedEnvelopeAo service

type RedEnvelopeAoService interface {
	SendOut(ctx context.Context, in *RedEnvelopeSendRequest, opts ...client.CallOption) (*RedEnvelopeSendResponse, error)
	Receive(ctx context.Context, in *RedEnvelopeReceiveRequest, opts ...client.CallOption) (*RedEnvelopeReceiveResponse, error)
	Refund(ctx context.Context, in *RedEnvelopeRefundRequest, opts ...client.CallOption) (*RedEnvelopeRefundResponse, error)
	Get(ctx context.Context, in *GetRedEnvelopRequest, opts ...client.CallOption) (*GetRedEnvelopeResponse, error)
	ListSent(ctx context.Context, in *ListSentRequest, opts ...client.CallOption) (*ListSentResponse, error)
	ListReceived(ctx context.Context, in *ListReceivedRequest, opts ...client.CallOption) (*ListReceivedResponse, error)
	ListReceivable(ctx context.Context, in *ListReceivableRequest, opts ...client.CallOption) (*ListReceivableResponse, error)
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...client.CallOption) (*ListItemsResponse, error)
}

type redEnvelopeAoService struct {
	c    client.Client
	name string
}

func NewRedEnvelopeAoService(name string, c client.Client) RedEnvelopeAoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "red.proto.envelope"
	}
	return &redEnvelopeAoService{
		c:    c,
		name: name,
	}
}

func (c *redEnvelopeAoService) SendOut(ctx context.Context, in *RedEnvelopeSendRequest, opts ...client.CallOption) (*RedEnvelopeSendResponse, error) {
	req := c.c.NewRequest(c.name, "RedEnvelopeAo.SendOut", in)
	out := new(RedEnvelopeSendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redEnvelopeAoService) Receive(ctx context.Context, in *RedEnvelopeReceiveRequest, opts ...client.CallOption) (*RedEnvelopeReceiveResponse, error) {
	req := c.c.NewRequest(c.name, "RedEnvelopeAo.Receive", in)
	out := new(RedEnvelopeReceiveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redEnvelopeAoService) Refund(ctx context.Context, in *RedEnvelopeRefundRequest, opts ...client.CallOption) (*RedEnvelopeRefundResponse, error) {
	req := c.c.NewRequest(c.name, "RedEnvelopeAo.Refund", in)
	out := new(RedEnvelopeRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redEnvelopeAoService) Get(ctx context.Context, in *GetRedEnvelopRequest, opts ...client.CallOption) (*GetRedEnvelopeResponse, error) {
	req := c.c.NewRequest(c.name, "RedEnvelopeAo.Get", in)
	out := new(GetRedEnvelopeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redEnvelopeAoService) ListSent(ctx context.Context, in *ListSentRequest, opts ...client.CallOption) (*ListSentResponse, error) {
	req := c.c.NewRequest(c.name, "RedEnvelopeAo.ListSent", in)
	out := new(ListSentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redEnvelopeAoService) ListReceived(ctx context.Context, in *ListReceivedRequest, opts ...client.CallOption) (*ListReceivedResponse, error) {
	req := c.c.NewRequest(c.name, "RedEnvelopeAo.ListReceived", in)
	out := new(ListReceivedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redEnvelopeAoService) ListReceivable(ctx context.Context, in *ListReceivableRequest, opts ...client.CallOption) (*ListReceivableResponse, error) {
	req := c.c.NewRequest(c.name, "RedEnvelopeAo.ListReceivable", in)
	out := new(ListReceivableResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redEnvelopeAoService) ListItems(ctx context.Context, in *ListItemsRequest, opts ...client.CallOption) (*ListItemsResponse, error) {
	req := c.c.NewRequest(c.name, "RedEnvelopeAo.ListItems", in)
	out := new(ListItemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RedEnvelopeAo service

type RedEnvelopeAoHandler interface {
	SendOut(context.Context, *RedEnvelopeSendRequest, *RedEnvelopeSendResponse) error
	Receive(context.Context, *RedEnvelopeReceiveRequest, *RedEnvelopeReceiveResponse) error
	Refund(context.Context, *RedEnvelopeRefundRequest, *RedEnvelopeRefundResponse) error
	Get(context.Context, *GetRedEnvelopRequest, *GetRedEnvelopeResponse) error
	ListSent(context.Context, *ListSentRequest, *ListSentResponse) error
	ListReceived(context.Context, *ListReceivedRequest, *ListReceivedResponse) error
	ListReceivable(context.Context, *ListReceivableRequest, *ListReceivableResponse) error
	ListItems(context.Context, *ListItemsRequest, *ListItemsResponse) error
}

func RegisterRedEnvelopeAoHandler(s server.Server, hdlr RedEnvelopeAoHandler, opts ...server.HandlerOption) error {
	type redEnvelopeAo interface {
		SendOut(ctx context.Context, in *RedEnvelopeSendRequest, out *RedEnvelopeSendResponse) error
		Receive(ctx context.Context, in *RedEnvelopeReceiveRequest, out *RedEnvelopeReceiveResponse) error
		Refund(ctx context.Context, in *RedEnvelopeRefundRequest, out *RedEnvelopeRefundResponse) error
		Get(ctx context.Context, in *GetRedEnvelopRequest, out *GetRedEnvelopeResponse) error
		ListSent(ctx context.Context, in *ListSentRequest, out *ListSentResponse) error
		ListReceived(ctx context.Context, in *ListReceivedRequest, out *ListReceivedResponse) error
		ListReceivable(ctx context.Context, in *ListReceivableRequest, out *ListReceivableResponse) error
		ListItems(ctx context.Context, in *ListItemsRequest, out *ListItemsResponse) error
	}
	type RedEnvelopeAo struct {
		redEnvelopeAo
	}
	h := &redEnvelopeAoHandler{hdlr}
	return s.Handle(s.NewHandler(&RedEnvelopeAo{h}, opts...))
}

type redEnvelopeAoHandler struct {
	RedEnvelopeAoHandler
}

func (h *redEnvelopeAoHandler) SendOut(ctx context.Context, in *RedEnvelopeSendRequest, out *RedEnvelopeSendResponse) error {
	return h.RedEnvelopeAoHandler.SendOut(ctx, in, out)
}

func (h *redEnvelopeAoHandler) Receive(ctx context.Context, in *RedEnvelopeReceiveRequest, out *RedEnvelopeReceiveResponse) error {
	return h.RedEnvelopeAoHandler.Receive(ctx, in, out)
}

func (h *redEnvelopeAoHandler) Refund(ctx context.Context, in *RedEnvelopeRefundRequest, out *RedEnvelopeRefundResponse) error {
	return h.RedEnvelopeAoHandler.Refund(ctx, in, out)
}

func (h *redEnvelopeAoHandler) Get(ctx context.Context, in *GetRedEnvelopRequest, out *GetRedEnvelopeResponse) error {
	return h.RedEnvelopeAoHandler.Get(ctx, in, out)
}

func (h *redEnvelopeAoHandler) ListSent(ctx context.Context, in *ListSentRequest, out *ListSentResponse) error {
	return h.RedEnvelopeAoHandler.ListSent(ctx, in, out)
}

func (h *redEnvelopeAoHandler) ListReceived(ctx context.Context, in *ListReceivedRequest, out *ListReceivedResponse) error {
	return h.RedEnvelopeAoHandler.ListReceived(ctx, in, out)
}

func (h *redEnvelopeAoHandler) ListReceivable(ctx context.Context, in *ListReceivableRequest, out *ListReceivableResponse) error {
	return h.RedEnvelopeAoHandler.ListReceivable(ctx, in, out)
}

func (h *redEnvelopeAoHandler) ListItems(ctx context.Context, in *ListItemsRequest, out *ListItemsResponse) error {
	return h.RedEnvelopeAoHandler.ListItems(ctx, in, out)
}
